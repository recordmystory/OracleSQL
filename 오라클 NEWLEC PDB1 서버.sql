CREATE TABLE MEMBER
(
    ID VARCHAR2(50),
    PWD NVARCHAR2(50),
    NAME NVARCHAR2(50),
    GENDER NCHAR(2), -- 남성 / 여성 UTF
    AGE NUMBER(3),
    BIRTHDATY CHAR(10),-- 2000-02-02
    PHONE CHAR(13), -- 010-1234-2345
    REGDATE DATE
);

INSERT INTO MEMBER (GENDER) VALUES('남성');

SELECT LENGTHB(GENDER) FROM MEMBER;

DROP TABLE MEMBER;

SELECT LENGTH('남자') FROM DUAL;
SELECT LENGTHB('남자') FROM DUAL;

SELECT * FROM NLS_DATABASE_PARAMETERS

--컬럼 데이터 타입 수정
ALTER TABLE MEMBER MODIFY ID NVARCHAR2(50);

--컬럼 삭제
ALTER TABLE MEMBER DROP COLUMN AGE;

--컬럼 추가
ALTER TABLE MEMBER ADD EMAIL VARCHAR2(200);

CREATE TABLE NOTICE
(
     ID		NUMBER,
     TITLE 		NVARCHAR2(100),
     WRITER_ID	NVARCHAR2(50),
     CONTENT	CLOB,
     REGDATE  	TIMESTAMP,
     HIT		NUMBER,
     FILES		NVARCHAR2(1000)
);

CREATE TABLE "COMMENT"
(
     ID		NUMBER,
     CONTENT	NVARCHAR2(2000),
     REGDATE  	TIMESTAMP,
     WRITER_ID	NVARCHAR2(50),
     NOTICE_ID	NUMBER
);

CREATE TABLE ROLE
(
     ID		VARCHAR2(50),
     DISCRIPTION 	NVARCHAR2(500)
);

CREATE TABLE MEMBER_ROLE
(
     MEMBER_ID	NVARCHAR2(50),
     ROLE_ID		VARCHAR2(50)
);

--값 넣기
INSERT INTO MEMBER(ID, PWD) VALUES ('newlec', '1111');
INSERT INTO MEMBER(ID, PWD) VALUES ('test', '1111');
--컬럼 별칭 넣기
SELECT ID "USER ID", NAME, PWD FROM MEMBER;
--모든 행의 PWD를 '111'로 변경하기
UPDATE MEMBER SET PWD='222';

--특정 유저만 PWD 수정
UPDATE MEMBER SET PWD='222', NAME='손오공' WHERE ID='dragon';

--행 삭제
DELETE MEMBER WHERE ID='test';

COMMIT;
ROLLBACK;

SELECT HIT+1 HIT FROM NOTICE;

--출력을 위한 테이블 DUAL
SELECT 1+'A' FROM DUAL;

--문자열 더하기
SELECT 1 || '3' FROM DUAL;

--모든 회원의 이름을 조회하시오. 단 이름은 ID를 붙여서 나타내시오. 홍길동(HONG)
SELECT NAME||'('||ID||')' NAME FROM MEMBER;

DROP TABLE NOTICE;
SELECT * FROM NOTICE;

--게시글 중에서 작성자가 'newlec'인 게시글만 조회하시오.
SELECT * FROM NOTICE WHERE WRITER_ID='newlec';

--게시글 중에서 조회수가 3이 넘는 글만 조회하시오.
SELECT * FROM NOTICE WHERE HIT > 3;

--게시글 중에서 내용을 입력하지 않은 게시글을 조회하시오.
SELECT * FROM NOTICE WHERE CONTENT IS NULL;

--조회수가 0,1,2인 게시글을 조회하시오.
SELECT * FROM NOTICE WHERE HIT BETWEEN 0 AND 2;

--조회수가 0,2,7인 게시글을 조회하시오.
SELECT * FROM NOTICE WHERE HIT IN(0,2,7);

--조회수가 0,2,7이 아닌 게시글을 조회하시오.
SELECT * FROM NOTICE WHERE HIT NOT IN(0,2,7);

--회원 중에서 '박'씨 성을 조회하시오.
UPDATE NOTICE SET WRITER_ID='박땡땡' WHERE ID=1;

SELECT * FROM NOTICE WHERE WRITER_ID LIKE '박%';

--회원 중에서 '박'씨이고 이름이 외자인 회원을 조회하시오.
SELECT * FROM NOTICE WHERE WRITER_ID LIKE '박__';

--회원 중에서 '박'씨 성을 제외한 회원을 조회하시오.
SELECT * FROM NOTICE WHERE WRITER_ID NOT LIKE '박%';

--회원 중에서 이름에 '도'자가 들어간 회원을 조회하시오.
INSERT INTO NOTICE(WRITER_ID) VALUES ('도시락');

SELECT * FROM NOTICE WHERE WRITER_ID LIKE '%도%';

--제목에 번호가 들어간 데이터 출력
INSERT INTO NOTICE(TITLE) VALUES('아리랑 016-0000-2320');

SELECT * FROM NOTICE WHERE REGEXP_LIKE(TITLE, '01[016-9]-\d{3,4}-\d{4}');

--행 제한
SELECT * FROM NOTICE WHERE ROWNUM BETWEEN 1 AND 3;

SELECT * FROM (SELECT ROWNUM NUM, NOTICE.* FROM NOTICE)
WHERE NUM BETWEEN 1 AND 5;

SELECT DISTINCT AGE FROM MEMBER;
UPDATE MEMBER SET AGE=25 WHERE NAME='김비비';

--내장함수
SELECT SUBSTR('TRIANGLE', 1, 3) FROM DUAL;
--SUBSTRB 3번째 BYTE부터 자름
SELECT SUBSTRB('TRIANGLE', 1, 2) FROM DUAL;

SELECT SUBSTR(NAME, 2) FROM MEMBER;

--MEMBER 테이블에 BIRTHDAY 값 넣기
SELECT * FROM MEMBER;
UPDATE MEMBER SET BIRTHDAY='1999-07-11' WHERE NAME='뉴렉처';
UPDATE MEMBER SET BIRTHDAY='1989-02-01' WHERE NAME='손오공';
UPDATE MEMBER SET BIRTHDAY='2000-11-23' WHERE NAME='유재석';
UPDATE MEMBER SET BIRTHDAY='2005-09-03' WHERE NAME='김지석';
UPDATE MEMBER SET BIRTHDAY='1995-08-21' WHERE NAME='강호동';
UPDATE MEMBER SET BIRTHDAY='1987-12-29' WHERE NAME='김비비';

UPDATE MEMBER SET NAME='뉴렉처' WHERE BIRTHDAY=1999-01-11;

--컬럼 이름 수정
ALTER TABLE MEMBER RENAME COLUMN BIRTHDATY TO BIRTHDAY;

--모든 학생의 이름과 출생 월만을 조회하시오.
SELECT SUBSTR(NAME, 2, 2), SUBSTR(BIRTHDAY,6, 2) MONTH FROM MEMBER;

--MEMBER 테이블에 PHONE 값 넣기
UPDATE MEMBER SET PHONE='010-2323-2321' WHERE NAME='뉴렉처';
UPDATE MEMBER SET PHONE='011-5656-8235' WHERE NAME='손오공';
UPDATE MEMBER SET PHONE='010-6267-6565' WHERE NAME='유재석';
UPDATE MEMBER SET PHONE='011-2323-7521' WHERE NAME='김지석';
UPDATE MEMBER SET PHONE='011-7546-8524' WHERE NAME='강호동';
UPDATE MEMBER SET PHONE='010-2133-2531' WHERE NAME='김비비';

--회원 중에서 전화번호가 011으로 시작하는 회원의 모든 정보를 출력하시오.
SELECT SUBSTR(PHONE, 1, 3) FROM MEMBER;
SELECT * FROM MEMBER WHERE SUBSTR(PHONE, 1, 3)='011';
SELECT * FROM MEMBER WHERE PHONE LIKE '011%';

--회원 중에서 생년 월이 7,8,9월인 회원의 모든 정보를 출력하시오.
SELECT * FROM MEMBER WHERE SUBSTR(BIRTHDAY, 6, 2) NOT IN ('07','08', '09');

--MEMBER 테이블에 값 넣기
INSERT INTO MEMBER(ID, PWD, NAME, BIRTHDAY, PHONE, AGE) VALUES('nunusi', '123', '김현수', '1966-01-23', '010-2321-2556', 27);
INSERT INTO MEMBER(ID, PWD, NAME, BIRTHDAY, PHONE, AGE) VALUES('fish', '567', '김흥국', '1978-05-13', '010-5651-6456', 51);
INSERT INTO MEMBER(ID, PWD, NAME, BIRTHDAY, PHONE, AGE) VALUES('haha', '999', '이지현', '1978-01-23', '011-7821-2896', 33);
INSERT INTO MEMBER(ID, PWD, NAME, BIRTHDAY, PHONE, AGE) VALUES('mom', '789', '최태식', '1988-01-23', '011-2241-2646', 45);

INSERT INTO MEMBER(ID, PWD, NAME, BIRTHDAY, AGE) VALUES('didi', '111', '유재현', '2008-07-18', 15);
INSERT INTO MEMBER(ID, PWD, NAME, BIRTHDAY, AGE) VALUES('mian', '233', '최태식', '2006-07-18', 17);
INSERT INTO MEMBER(ID, PWD, NAME, BIRTHDAY, AGE) VALUES('ki', '111', '김태현', '1991-07-18', 32);
INSERT INTO MEMBER(ID, PWD, NAME, BIRTHDAY, AGE) VALUES('ku', '000', '박재정', '2000-03-18', 23);

--전화번호를 등록하지 않은 회원 중에서 생년 월이 7,8,9월인 회원의 모든 정보를 출력하시오.
SELECT * FROM MEMBER WHERE SUBSTR(BIRTHDAY, 7, 1) IN ('7', '8', '9') AND PHONE IS NULL;

--문자열 덧셈 함수와 연산
SELECT CONCAT('홍', '길동') FROM DUAL;
SELECT 3||'4' FROM DUAL;

--문자열 트림 함수
SELECT LTRIM('   HELLO   ') FROM DUAL; --LTRIM : 왼쪽
SELECT RTRIM('   HELLO   ') FROM DUAL; --RTRIM : 오른쪽
SELECT TRIM('   HELLO   ') FROM DUAL; --TRIM : 전체

--문자열 소문자 또는 대문자로 변경하기
SELECT LOWER('NeWleC') FROM DUAL;
SELECT UPPER('NeWleC') FROM DUAL;

--회원의 아이디가 'newlec'인 회원을 조회하시오.(대/소문자를 가리지 않고)
SELECT * FROM MEMBER WHERE UPPER(ID)='NEWLEC';

--문자열 대치 함수 REPLACE/TRANSLATE
SELECT REPLACE('WHERE WE ARE', 'WE', 'YOU') FROM DUAL;
SELECT TRANSLATE('WHERE WE ARE', 'WE', 'YOU') FROM DUAL;

--회원의 이름과 주소를 조회하시오.(단. 주소는 빈칸 없이 출력하시오.)
SELECT NAME, REPLACE(ADDRESS, ' ') FROM MEMBER;
SELECT * FROM MEMBER;

--문자열 패딩 함수
SELECT LPAD('HELLO', 10, '0') FROM DUAL; --왼쪽이 0으로 채워짐.
SELECT RPAD('HELLO', 10, '0') FROM DUAL;  --오른쪽이 0으로 채워짐.

--회원의 이름을 조회하시오.(단 이름의 길이가 3자가 안되는 경우는 이름 오른쪽을 언더바로 채우시오.)
SELECT RPAD(NAME, 8, '0') NAME FROM MEMBER;

--첫 글자를 대문자로 바꾸는 함수 INITCAP(문자열)
SELECT INITCAP('the imp하이ortant th오케이ing is') FROM DUAL;

--문자열 검색 함수 INSTR(문자열, 검색문자열, 위치, 찾을 수)
SELECT INSTR('ALL WE NEED TO IS JUST TO...', 'TO') SEARCH FROM DUAL;
SELECT INSTR('ALL WE NEED TO IS JUST TO...', 'TO', 15) SEARCH FROM DUAL;
SELECT INSTR('ALL WE NEED TO IS JUST TO...', 'TO', 1, 2) SEARCH FROM DUAL;

--회원의 전화번호에서 두 번째 대시(-) 문자가 존재하는 위치를 출력하시오.
SELECT INSTR(PHONE, '-', 1, 2) SEARCH FROM MEMBER;

--회원의 전화번호에서 첫 번재 대시(-) 문자와 두 번째 대시(-) 문자가 사이의 간격은?
SELECT (INSTR(PHONE, '-', 1, 2) - INSTR(PHONE, '-', 1, 1)) FROM MEMBER;

--전화번호에서 첫 번째와 두 번째 사이의 국번
SELECT INSTR(PHONE,'-', 1, 2) FROM MEMBER;
SELECT INSTR(PHONE,'-', 1, 1)-1 FROM MEMBER;

SELECT SUBSTR(PHONE, 5, INSTR(PHONE,'-', 1, 2)-INSTR(PHONE,'-', 1, 1)-1) PHONE FROM MEMBER;

-- 문자열 길이를 얻는 함수
SELECT LENGTH('WHERE WE ARE') FROM DUAL;

--모든 회원의 핸드폰 번호와 번호의 문자열 길이를 조회하시오.
SELECT PHONE, LENGTH(PHONE) FROM MEMBER;

--함수 중첩 : 만약에 회원의 전화번호 컬럼에 포함된 문자 '-'를 없앤 전화번호의 길이를 출력하시오.
SELECT LENGTH(PHONE) FROM MEMBER;

SELECT LENGTH(REPLACE(PHONE, '-', '')) FROM MEMBER;

--코드 값을 반환하는 함수
SELECT ASCII('A') FROM DUAL;

--코드 값을 문자로 반환하는 함수
SELECT CHR(65) FROM DUAL;

--숫자함수
--절대값을 구하는 함수 ABS(n)
SELECT ABS(35), ABS(-35) FROM DUAL;

--음수/양수를 알려주는 함수 SIGN(n)
SELECT SIGN(35), SIGN(-35), SIGN(0) FROM DUAL;

--숫자의 반올림 값을 알려주는 함수 ROUND(n, i)
SELECT ROUND(34.456789), ROUND(34.56789) FROM DUAL;
SELECT ROUND(12.3456789, 2), ROUND(12.3456789, 3) FROM DUAL;

--숫자의 제곱을 구하는 함수와 제곱근을 구하는 함수 POWER(n1, n2)/SQRT(n)
SELECT POWER(5,2), SQRT(25) FROM DUAL;
SELECT POWER(7,3), SQRT(64) FROM DUAL;

--현재 시간을 얻는 함수
--SYSTIMESTAMP:오라클 서버의 시간대
--CURRENT_TIMESTAMP:세션 설정의 시간대
SELECT SYSDATE, CURRENT_DATE, SYSTIMESTAMP, CURRENT_TIMESTAMP FROM DUAL;

--세션 시간과 포맷 변경
ALTER SESSION SET TIME_ZONE='09:00';
ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM-DD HH24:MI:SS';
SELECT SYSDATE, CURRENT_DATE FROM DUAL;
SELECT SYSTIMESTAMP FROM DUAL;

COMMIT;
--날짜 추출함수 EXTRACT(YEAR/MONTH/DAY/HOUR/MINUTE/SECOND FROM...)
SELECT EXTRACT(YEAR FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(MONTH FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(DAY FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(HOUR FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(MINUTE FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(SECOND FROM SYSDATE) FROM DUAL;

--MEMBER TABLE에 가입날짜 컬럼 추가
ALTER TABLE MEMBER ADD (JOINDATE DATE);

--MEMBER TABLE 가입날짜 값 넣기
UPDATE MEMBER SET JOINDATE='2023-05-23' WHERE NAME='박재정';

--가입 회원 중에 비수기(2,3,11,12)월 달에 가입한 회원을 조회하시오.
SELECT * FROM MEMBER;
SELECT * FROM MEMBER WHERE  EXTRACT(MONTH FROM JOINDATE) IN (2,3,11,12);

--날짜를 누적하는 함수 ADD_MONTH(날짜, 정수)
SELECT ADD_MONTHS(SYSDATE, 1) FROM DUAL;
SELECT ADD_MONTHS(SYSDATE, -1) FROM DUAL;

--가입 회원 중에 가입한지 6개월이 안 되는 회원을 조회하시오.
SELECT * FROM MEMBER WHERE ADD_MONTHS(SYSDATE, -6) > JOINDATE;

--날짜의 차이를 알아내는 함수 MONTHS_BETWEEN(날짜, 날짜)
SELECT MONTHS_BETWEEN(SYSDATE, TO_DATE('2013-12-25')) FROM DUAL;

--가입 회원 중에 가입한지 6개월이 안 되는 회원을 조회하시오.
SELECT * FROM MEMBER WHERE MONTHS_BETWEEN(SYSDATE, JOINDATE) < 6;

--다음 요일을 알려주는 함수 NEXT_DAY(현재날짜, 다음요일)
SELECT NEXT_DAY(SYSDATE, '수요일') FROM DUAL;
SELECT NEXT_DAY(SYSDATE, 1) FROM DUAL; --일요일

--월의 마지막 일자를 알려주는 함수 LAST_DAY(날짜)
SELECT LAST_DAY(SYSDATE) FROM DUAL;
SELECT LAST_DAY(ADD_MONTHS(SYSDATE, 2)) FROM DUAL;

--지정된 범위에서 날짜를 반올림하는/자르는 함수 ROUND/TRUNC(날짜, 포맷)
SELECT ROUND(TO_DATE('2051-02-03'), 'CC'), TRUNC(SYSDATE, 'CC') FROM DUAL;
SELECT ROUND(SYSDATE, 'YEAR'), TRUNC(SYSDATE, 'YEAR') FROM DUAL;
SELECT ROUND(SYSDATE, 'Q'), TRUNC(SYSDATE, 'Q') FROM DUAL;

--NUMBER 형식을 문자열(VARCHAR2)로 변환 TO_CHAR(NUMBER)
-- '$99,999,999,999.99' 숫자 길이보다 길어야 한다.
SELECT TO_CHAR(12345678, '$99,999,999,999.99') FROM DUAL; 

SELECT TO_CHAR (12345678, '99999,999') || 'HELLO' FROM DUAL;

--위의 식을 실행했을 때 나타나는 가격의 빈 공백을 없애고 출력하시오.
SELECT LTRIM(TO_CHAR (1234567890.345, '99,99999,99999.99')) || ' 원' 가격 FROM DUAL;

--DATE 형식을 문자열(VARCHAR2)로 변환 TO_CHAR(DATETIME)
SELECT TO_CHAR(SYSDATE, 'YY-MM-DD HH:MI:SS') FROM DUAL;

--문자열을 숫자형식으로 변환하는 함수 TO_NUMBER(문자열)
SELECT TO_NUMBER('1994') FROM DUAL;
SELECT TO_NUMBER ('2')+3 FROM DUAL;

--반환 값이 NULL일 경우에 대체 값을 제공하는 NVL(NULL, 대체값) 함수
SELECT * FROM MEMBER;
SELECT NVL(AGE, 0) FROM MEMBER;

--연령대 표시
SELECT TRUNC(AGE/10)*10||'대' FROM MEMBER;
SELECT NVL(TRUNC(AGE/10)*10,0) FROM MEMBER;

--NVL에서 조건을 하나 더 확장한 NVL2(입력값, NULL대체값, NOTNULL 대체값) 함수
SELECT NVL2(AGE, TRUNC(AGE/10)*10, 0) 연령대 FROM MEMBER;

--두 값이 같은 경우 NULL 그렇지 않은 경우 첫 번째 값 반환 NULLIF(값1, 값2) 함수
SELECT NAME, NULLIF(AGE,51) FROM MEMBER;

--조건에 따른 선택하기 DECODE(기준값, 비교값, 출력값, 비교값, 출력값)
SELECT DECODE(GENDER, '남성', 1, 2) FROM MEMBER;
SELECT DECODE(SUBSTR(PHONE, 1, 3), '011', 'SK', '016', 'KT', '신규번호'), PHONE, NAME FROM MEMBER;

--이름을 기준으로 역순으로 정렬해서 조회하시오.
SELECT * FROM MEMBER ORDER BY AGE DESC; 

--회원 중에서 '김'씨 성을 가진 회원을 조회하시오. 단 나이를 (오름차)순으로 정렬.
SELECT * FROM MEMBER WHERE NAME LIKE '김%' ORDER BY AGE ASC;

--집계 함수
SELECT * FROM NOTICE;
SELECT WRITER_ID, COUNT(ID) COUNT FROM NOTICE GROUP BY WRITER_ID ORDER BY COUNT(ID) DESC;
COMMIT;

--회원별 게시글 수를 조회하시오.
SELECT WRITER_ID, COUNT(N.ID) FROM NOTICE N 
GROUP BY WRITER_ID HAVING COUNT(N.ID) <= 2;

SELECT DENSE_RANK() OVER (PARTITION BY WRITER_ID ORDER BY HIT DESC), ID, TITLE, WRITER_ID,HIT
FROM NOTICE;
--ORDER BY HIT;

--서브쿼리
SELECT * FROM
(SELECT * FROM MEMBER ORDER BY JOINDATE DESC) 
WHERE ROWNUM BETWEEN 1 AND 3; 

--나이가 30 이상인 회원 목록 조회
SELECT * FROM MEMBER WHERE AGE >= 30;

--평균나이 이상인 회원
SELECT * FROM MEMBER 
WHERE AGE >= (SELECT AVG(AGE) FROM MEMBER);

SELECT AVG(AGE) FROM MEMBER;

